
==================== FINAL INTERFACE ====================
2016-05-21 17:14:45.664117 UTC

interface main@main:HW3 7103
  interface hash: 2cf5efab140dd88d7dbcd88d1b6416dc
  ABI hash: 165aa4ce0d03eb660d29d33710379cbb
  export-list hash: ecda2a06a561e359381aec2c62798042
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9cf43e6ce863b16880aa94303f2f9722
  sig of: Nothing
  used TH splices: False
  where
exports:
  HW3.isHeap
  HW3.listDigits
  HW3.root
  HW3.sequence2_3_f
  HW3.symmetric
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.Char c8f827952d4111ae2e47c0b105217cdb
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Float e532d434ec2447d809887c0fca1d78a5
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Unicode cdf84fc3abbaf34ba6b6645291cef991
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  integer-gmp-1.0.0.0:GHC.Integer.Type 371e90fe753f08ddedf0d2657a9ef5c4
05146af72728b50e27911f4004e3350e
  $wisHeap ::
    GHC.Classes.Ord a => a -> [HW3.MultiTree a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,A,A)><L,U><S,1*U>,
     Inline: [0] -}
0d5005ade81fe8ed2936a46c64b368de
  $wroot :: GHC.Prim.Double# -> GHC.Prim.Double#
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Double# ->
                 case GHC.Real.$wnumericEnumFromThen
                        @ GHC.Types.Double
                        GHC.Float.$fFractionalDouble
                        HW3.root1
                        (GHC.Types.D# ww) of ww1 { (#,#) ww2 ww3 ->
                 let {
                   lvl :: GHC.Types.Bool
                   = GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<## 0.0 ww)
                 } in
                 letrec {
                   $wgo :: [GHC.Types.Double] -> GHC.Prim.Double#
                     {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                   = \ w :: [GHC.Types.Double] ->
                     case w of wild {
                       [] -> case GHC.List.badHead ret_ty GHC.Prim.Double# of {}
                       : y ys
                       -> case y of wild1 { GHC.Types.D# x ->
                          let {
                            x1 :: GHC.Prim.Double#
                            = GHC.Prim.-## (GHC.Prim.+## (GHC.Prim.tanDouble# x) x) 1.0
                          } in
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==## x1 0.0) of wild2 {
                            GHC.Types.False
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.>## x1 0.0) of wild3 {
                                 GHC.Types.False
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.<## (GHC.Prim.negateDouble# x1) ww) of wild4 {
                                      GHC.Types.False -> $wgo ys GHC.Types.True -> x }
                                 GHC.Types.True
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.<## x1 ww) of wild4 {
                                      GHC.Types.False -> $wgo ys GHC.Types.True -> x } }
                            GHC.Types.True
                            -> case lvl of wild3 {
                                 GHC.Types.False -> $wgo ys GHC.Types.True -> x } } } }
                 } in
                 $wgo (GHC.Types.: @ GHC.Types.Double ww2 ww3) }) -}
b8e134f90dd1a5cc6bd7d1651d33ba77
  $wsequence2_3_f :: GHC.Prim.Int# -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.*# (GHC.Prim.*# ww ww) ww
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# 0 y) of wild {
                   GHC.Types.False
                   -> GHC.List.$w!!
                        @ GHC.Integer.Type.Integer
                        HW3.sequence2_3_f6
                        (GHC.Prim.-# ww 1)
                   GHC.Types.True
                   -> GHC.List.$w!!
                        @ GHC.Integer.Type.Integer
                        (Data.OldList.sortBy
                           @ GHC.Integer.Type.Integer
                           GHC.Integer.Type.compareInteger
                           (GHC.List.$wunsafeTake
                              @ GHC.Integer.Type.Integer
                              y
                              HW3.sequence2_3_f1))
                        (GHC.Prim.-# ww 1) }) -}
6b549cbb10603addead779b5586d8e11
  data MultiTree a = Branch a [HW3.MultiTree a]
    RecFlag: Recursive
    Promotable
079d6885cd04dda0e8991732a7924772
  data Tree a = Empty | Node (HW3.Tree a) a (HW3.Tree a)
    Promotable
2ff2beee5516ea0839d6ade2bb80faf0
  flatten :: HW3.Tree a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
5bda90acf561711b78e9309ed725a34c
  isHeap :: GHC.Classes.Ord a => HW3.MultiTree a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,A,A)><S(LS),1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a w :: GHC.Classes.Ord a w1 :: HW3.MultiTree a ->
                 case w1 of ww { HW3.Branch ww1 ww2 ->
                 HW3.$wisHeap @ a w ww1 ww2 }) -}
0fe4880ae64e33be9caeaea7fb1ee218
  listDigits :: HW3.Tree GHC.Base.String -> [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ tree :: HW3.Tree GHC.Base.String ->
                 HW3.listDigits_go (HW3.flatten @ GHC.Base.String tree)) -}
037e0ce38069ab1b38d096d805a877b7
  listDigits_go :: [GHC.Base.String] -> [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
2a20bcc50d7c9a26233c1476b3b9f955
  root :: GHC.Types.Double -> GHC.Types.Double
  {- Arity: 1, Strictness: <S,U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Double ->
                 case w of ww { GHC.Types.D# ww1 ->
                 case HW3.$wroot ww1 of ww2 { DEFAULT -> GHC.Types.D# ww2 } }) -}
c6a90fd7e66f2d44a417155d25260b2c
  root1 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0) -}
84e4722afb5998d1e46926f442c23939
  sequence2_3_f :: GHC.Types.Int -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 -> HW3.$wsequence2_3_f ww1 }) -}
084c4bb3ceb3505b1ed77b30c65d9d38
  sequence2_3_f1 :: [GHC.Integer.Type.Integer]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   HW3.sequence2_3_f3
                   HW3.sequence2_3_f2) -}
8f8c42b5f50b32f0591e11d412f5ae43
  sequence2_3_f2 :: [GHC.Integer.Type.Integer]
  {- Unfolding: (GHC.Enum.enumDeltaIntegerFB
                   @ [GHC.Integer.Type.Integer]
                   HW3.sequence2_3_f5
                   HW3.sequence2_3_f4
                   HW3.sequence2_3_f3) -}
2d7f1322d094dd95df360d0435da7f4e
  sequence2_3_f3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 1) -}
259cf9a365462b8d23a4e342bc06b42f
  sequence2_3_f4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 2) -}
39dd8188f1003c964fcca7d5b9edf762
  sequence2_3_f5 ::
    GHC.Integer.Type.Integer
    -> [GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer]
  {- Arity: 2,
     Unfolding: (\ ds :: GHC.Integer.Type.Integer
                   ds1 :: [GHC.Integer.Type.Integer][OneShot] ->
                 GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   (GHC.Integer.Type.timesInteger ds ds)
                   (GHC.Types.:
                      @ GHC.Integer.Type.Integer
                      (GHC.Integer.Type.timesInteger
                         (GHC.Integer.Type.timesInteger ds ds)
                         ds)
                      (GHC.Types.:
                         @ GHC.Integer.Type.Integer
                         (letrec {
                            go1 :: GHC.Integer.Type.Integer
                                   -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
                              {- Arity: 2, Strictness: <S,U><L,U> -}
                            = \ x :: GHC.Integer.Type.Integer
                                eta :: GHC.Integer.Type.Integer ->
                              case GHC.Integer.Type.gtInteger# x ds of wild { DEFAULT ->
                              case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                                GHC.Types.False
                                -> go1
                                     (GHC.Integer.Type.plusInteger x HW3.sequence2_3_f3)
                                     (GHC.Integer.Type.timesInteger eta x)
                                GHC.Types.True -> eta } }
                          } in
                          go1 HW3.sequence2_3_f3 HW3.sequence2_3_f3)
                         ds1))) -}
733aa3baf12b9557687508b8918105c7
  sequence2_3_f6 :: [GHC.Integer.Type.Integer]
  {- Unfolding: (Data.OldList.sortBy
                   @ GHC.Integer.Type.Integer
                   GHC.Integer.Type.compareInteger
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
efd44260219d0292eb9b551d0a410f69
  symmetric :: HW3.Tree a -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ds :: HW3.Tree a ->
                 case ds of wild {
                   HW3.Empty -> HW3.symmetric1
                   HW3.Node a1 ds1 b -> HW3.symmetric' @ a @ a a1 b }) -}
34d65714299dc199bd53e32dc137445b
  symmetric' :: HW3.Tree a -> HW3.Tree b -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
bebc54e04edf99048a7dc56805ff9550
  symmetric1 :: GHC.Types.Bool
  {- Strictness: b -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

